name: Validate Company Profiles

on:
  pull_request:
    paths:
      - 'company-profiles/**'
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v44
      with:
        files: |
          company-profiles/**/*.md

    - name: Validate company profiles
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        echo "Validating company profiles..."

        ERRORS=0
        WARNINGS=0

        for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          echo "Checking: $file"

          # Check if file exists
          if [ ! -f "$file" ]; then
            echo "❌ File not found: $file"
            ERRORS=$((ERRORS + 1))
            continue
          fi

          # Check for company name (H1 heading)
          if ! grep -q "^# " "$file"; then
            echo "❌ Missing company name (H1 heading) in: $file"
            ERRORS=$((ERRORS + 1))
          fi

          # Check for required sections
          REQUIRED_SECTIONS=(
            "## Company blurb"
            "## Company size"
            "## Remote status"
            "## Region"
            "## Company technologies"
            "## Office locations"
            "## How to apply"
          )

          for section in "${REQUIRED_SECTIONS[@]}"; do
            if ! grep -q "^${section}" "$file"; then
              echo "❌ Missing required section '${section}' in: $file"
              ERRORS=$((ERRORS + 1))
            fi
          done

          # Check for placeholder text
          if grep -qi "TODO\|FIXME\|PLACEHOLDER" "$file"; then
            echo "⚠️  Contains placeholder text (TODO/FIXME) in: $file"
            WARNINGS=$((WARNINGS + 1))
          fi

          # Check if sections are empty (just heading with nothing after)
          if grep -Pzo "## Company blurb\s*\n\s*\n## " "$file" > /dev/null 2>&1; then
            echo "❌ Company blurb section is empty in: $file"
            ERRORS=$((ERRORS + 1))
          fi

          # Check for very short Remote status (most important section)
          REMOTE_STATUS=$(sed -n '/## Remote status/,/## /p' "$file" | head -n -1 | tail -n +2)
          if [ ${#REMOTE_STATUS} -lt 50 ]; then
            echo "⚠️  Remote status section seems too short (provide more details) in: $file"
            WARNINGS=$((WARNINGS + 1))
          fi

          # Check for URL in How to apply section
          HOW_TO_APPLY=$(sed -n '/## How to apply/,/^## \|^$/p' "$file")

          if ! echo "$HOW_TO_APPLY" | grep -qE 'https?://'; then
            echo "❌ No URL found in 'How to apply' section in: $file"
            ERRORS=$((ERRORS + 1))
          else
            # Extract URLs and optionally check if they're reachable (as warning only)
            URLS=$(echo "$HOW_TO_APPLY" | grep -oE 'https?://[^\s<>\"]+' | head -n 3)

            for url in $URLS; do
              # Basic URL reachability check (warning only, don't fail on this)
              if ! curl -L --silent --head --fail --max-time 10 "$url" > /dev/null 2>&1; then
                echo "⚠️  URL may be unreachable: $url in $file"
                WARNINGS=$((WARNINGS + 1))
              fi
            done
          fi

          echo "✅ $file passed basic validation"
        done

        echo ""
        echo "Summary:"
        echo "- Errors: $ERRORS"
        echo "- Warnings: $WARNINGS"

        if [ $ERRORS -gt 0 ]; then
          echo ""
          echo "❌ Validation failed with $ERRORS error(s)"
          exit 1
        elif [ $WARNINGS -gt 0 ]; then
          echo ""
          echo "⚠️  Validation passed with $WARNINGS warning(s)"
          exit 0
        else
          echo ""
          echo "✅ All validations passed!"
          exit 0
        fi

    - name: Comment on PR
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: `## ❌ Company Profile Validation Failed

            Some issues were found with the company profile(s) in this PR. Please review the [validation logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.

            ### Common issues:
            - Missing required sections (Company blurb, Company size, Remote status, Region, Company technologies, Office locations, How to apply)
            - Missing company name (should start with \`# Company Name\`)
            - Placeholder text (TODO, FIXME) left in the file
            - Empty sections
            - Remote status section too short (please provide details!)
            - Missing URL in "How to apply" section

            Please fix the issues and push a new commit. The validation will run automatically.

            See [CONTRIBUTING.md](${{ github.server_url }}/${{ github.repository }}/blob/main/.github/CONTRIBUTING.md) for guidelines.`
          });
